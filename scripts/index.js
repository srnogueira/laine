function rootFind(fun,guess0){let deriv,count2,factor,change,guess=[guess0,0],ans=[fun(guess0),0],count=0;do{deriv=numericDerivative(fun,ans[0],guess[0]),count2=0,factor=2;do{if(factor/=2,change=ans[0]/deriv*factor,guess[1]=guess[0]-change,ans[1]=fun(guess[1]),count2++,count2>20)break}while(Math.abs(ans[1])>Math.abs(ans[0]));if(ans[0]=ans[1],guess[0]=guess[1],count++,count>50)throw Error("Max. number of iterations")}while(Math.abs(ans[0])>1e-6&&Math.abs(change)>1e-6);return guess[0]}function numericDerivative(fun,f,x){let xNear,fNear,dfdx;return xNear=1.0001*x,xNear-x==0&&(xNear=x+1e-4),fNear=fun(xNear),dfdx=(fNear-f)/(xNear-x),dfdx}class NasaData{constructor(coeffs,rangeT,MW){this.coeffs=coeffs,this.rangeT=rangeT,this.MW=MW}getCoefs(T){for(let i=1;i<this.rangeT.length;i++)if(T<this.rangeT[i])return this.coeffs[i-1];throw Error(`Temperature out of the range ${this.rangeT}`)}}function defaultDatabase(){let speciesNasa={};return speciesNasa.N2=new NasaData([[22103.71497,-381.846182,6.08273836,-.00853091441,1384646189e-14,-9.62579362e-9,2519705809e-21,710.846086,-10.76003744],[587712.406,-2239.249073,6.06694922,-.00061396855,1.491806679e-7,-1923105485e-20,1061954386e-24,12832.10415,-15.86640027]],[200,1e3,6e3],28.0134),speciesNasa.O2=new NasaData([[-34255.6342,484.700097,1.119010961,.00429388924,-6.83630052e-7,-2.0233727e-9,1039040018e-21,-3391.45487,18.4969947],[-1037939.022,2344.830282,1.819732036,.001267847582,-2.188067988e-7,2053719572e-20,-819346705e-24,-16890.10929,17.38716506]],[200,1e3,6e3],31.9988),speciesNasa.CO2=new NasaData([[49436.5054,-626.411601,5.30172524,.002503813816,-2.127308728e-7,-7.68998878e-10,2849677801e-22,-45281.9846,-7.04827944],[117696.2419,-1788.791477,8.29152319,-922315678e-13,4.86367688e-9,-1891053312e-21,633003659e-24,-39083.5059,-26.52669281]],[200,1e3,6e3],44.0095),speciesNasa.CO=new NasaData([[14890.45326,-292.2285939,5.72452717,-.00817623503,1456903469e-14,-1.087746302e-8,3027941827e-21,-13031.31878,-7.85924135],[461919.725,-1944.704863,5.91671418,-.000566428283,1.39881454e-7,-1787680361e-20,962093557e-24,-2466.261084,-13.87413108]],[200,1e3,6e3],28.0101),speciesNasa.H2O=new NasaData([[-39479.6083,575.573102,.931782653,.00722271286,-734255737e-14,4.95504349e-9,-1336933246e-21,-33039.7431,17.24205775],[1034972.096,-2412.698562,4.64611078,.002291998307,-6.83683048e-7,942646893e-19,-482238053e-23,-13842.86509,-7.97814851]],[200,1e3,6e3],18.01528),speciesNasa.OH=new NasaData([[-1998.85899,93.0013616,3.050854229,.001529529288,-3157890998e-15,3.31544618e-9,-1138762683e-21,2991.214235,4.67411079],[1017393.379,-2509.957276,5.11654786,.000130529993,-8.28432226e-8,2006475941e-20,-1556993656e-24,20196.40206,-11.01282337]],[200,1e3,6e3],17.00734),speciesNasa.H2=new NasaData([[40783.2321,-800.918604,8.21470201,-.01269714457,1753605076e-14,-1.20286027e-8,336809349e-20,2682.484665,-30.43788844],[560812.801,-837.150474,2.975364532,.001252249124,-3.74071619e-7,59366252e-18,-36069941e-22,5339.82441,-2.202774769]],[200,1e3,6e3],2.01588),speciesNasa.H=new NasaData([[0,0,2.5,0,0,0,0,25473.70801,-.446682853],[60.7877425,-.1819354417,2.500211817,-1.226512864e-7,373287633e-19,-568774456e-23,3410210197e-28,25474.86398,-.448191777]],[200,1e3,6e3],1.00794),speciesNasa.NO=new NasaData([[-11439.16503,153.6467592,3.43146873,-.002668592368,848139912e-14,-7.68511105e-9,2386797655e-21,9098.21441,6.72872549],[223901.8716,-1289.651623,5.43393603,-.00036560349,9.88096645e-8,-1416076856e-20,938018462e-24,17503.17656,-8.50166909]],[200,1e3,6e3],30.0061),speciesNasa.NO2=new NasaData([[-56420.3878,963.308572,-2.434510974,.01927760886,-1874559328e-14,9.14549773e-9,-1777647635e-21,-1547.925037,40.6785121],[721300.157,-3832.6152,11.13963285,-.002238062246,6.54772343e-7,-76113359e-18,332836105e-23,25024.97403,-43.0513004]],[200,1e3,6e3],46.0055),speciesNasa.N=new NasaData([[0,0,2.5,0,0,0,0,56104.6378,4.193905036],[88765.0138,-107.12315,2.362188287,.0002916720081,-1.7295151e-7,401265788e-19,-2677227571e-24,56973.5133,4.865231506]],[200,1e3,6e3],14.0067),speciesNasa.O=new NasaData([[-7953.6113,160.7177787,1.966226438,.00101367031,-1110415423e-15,6.5175075e-10,-1584779251e-22,28403.62437,8.40424182],[261902.0262,-729.872203,3.31717727,-.000428133436,1.036104594e-7,-943830433e-20,2725038297e-25,33924.2806,-.667958535]],[200,1e3,6e3],15.9994),speciesNasa.CH4=new NasaData([[-176685.0998,2786.18102,-12.0257785,.0391761929,-361905443e-13,2.026853043e-8,-497670549e-20,-23313.1436,89.0432275],[3730042.76,-13835.01485,20.49107091,-.001961974759,4.72731304e-7,-372881469e-19,1623737207e-24,75320.6691,-121.9124889]],[200,1e3,6e3],16.04246),speciesNasa.C2H4=new NasaData([[-116360.5836,2554.85151,-16.09746428,.0662577932,-788508186e-13,5.12522482e-8,-1370340031e-20,-6176.19107,109.3338343],[3408763.67,-13748.47903,23.65898074,-.002423804419,4.43139566e-7,-435268339e-19,1775410633e-24,88204.2938,-137.1278108]],[200,1e3,6e3],28.05316),speciesNasa.C2H6=new NasaData([[-186204.4161,3406.19186,-19.51705092,.0756583559,-820417322e-13,5.0611358e-8,-1319281992e-20,-27029.3289,129.8140496],[5025782.13,-20330.22397,33.2255293,-.00383670341,7.23840586e-7,-73191825e-18,3065468699e-24,111596.395,-203.9410584]],[200,1e3,6e3],30.06904),speciesNasa.C3H8=new NasaData([[-243314.4337,4656.27081,-29.39466091,.1188952745,-.0001376308269,8.81482391e-8,-2342987994e-20,-35403.3527,184.1749277],[6420731.68,-26597.91134,45.3435684,-.00502066392,9.47121694e-7,-957540523e-19,400967288e-23,145558.2459,-281.8374734]],[200,1e3,6e3],44.09562),speciesNasa.C4H10=new NasaData([[-317587.254,6176.33182,-38.9156212,.1584654284,-.0001860050159,1.199676349e-7,-320167055e-19,-45403.6339,237.9488665],[7682322.45,-32560.5151,57.3673275,-.00619791681,1180186048e-15,-1.221893698e-10,525063525e-23,177452.656,-358.791876]],[200,1e3,6e3],58.1222),speciesNasa.C5H12=new NasaData([[-276889.4625,5834.28347,-36.1754148,.1533339707,-.0001528395882,8.191092e-8,-1792327902e-20,-46653.7525,226.5544053],[-2530779.286,-8972.59326,45.3622326,-.002626989916,3135136419e-15,-5.31872894e-10,2886896868e-23,14846.16529,-251.6550384]],[200,1e3,6e3],72.14878),speciesNasa.C6H14=new NasaData([[-581592.67,10790.97724,-66.3394703,.2523715155,-.0002904344705,1.802201514e-7,-461722368e-19,-72715.4457,393.828354],[-3106625.684,-7346.08792,46.9413176,.001693963977,2068996667e-15,-4.21214168e-10,2452345845e-23,523.750312,-254.9967718]],[200,1e3,6e3],86.17536),speciesNasa.C7H16=new NasaData([[-612743.289,11840.85437,-74.871886,.2918466052,-.000341679549,2.159285269e-7,-565585273e-19,-80134.0894,440.721332],[9135632.47,-39233.1969,78.8978085,-.00465425193,2071774142e-15,-3.4425393e-10,1976834775e-23,205070.8295,-485.110402]],[200,1e3,6e3],100.20194),speciesNasa.C8H18=new NasaData([[-698664.715,13385.01096,-84.1516592,.327193666,-.000377720959,2.339836988e-7,-601089265e-19,-90262.2325,493.922214],[6365406.95,-31053.64657,69.6916234,.01048059637,-412962195e-14,5.54322632e-10,-2651436499e-23,150096.8785,-416.989565]],[200,1e3,6e3],114.22852),speciesNasa.C_s=new NasaData([[113285.676,-1980.421677,13.65384188,-.0463609644,.0001021333011,-1.082893179e-7,447225886e-19,8943.85976,-72.9582474],[335600.441,-2596.528368,6.94884191,-.00348483609,1844192445e-15,-5.05520596e-10,575063901e-22,13984.12456,-44.7718304],[202310.5106,-1138.235908,3.7002795,-.0001833807727,6.34368325e-8,-706858948e-20,333543598e-24,5848.13485,-23.50925275]],[200,600,2e3,6e3],12.0107),speciesNasa.H2O_l=new NasaData([[1326371304,-24482953.88,187942.8776,-767.899505,1.761556813,-.002151167128,1092570813e-15,110176047.6,-977970.097],[1263631001,-16803802.49,92782.3479,-272.237395,.447924376,-.000391939743,1.425743266e-7,81131768.8,-513441.808]],[273.15,373.1507,600],18.01528),speciesNasa}let speciesNasa=defaultDatabase();function nasaH(T,a){return 8.31451*T*(-a[0]/(T*T)+a[1]*Math.log(T)/T+a[2]+a[3]*T/2+a[4]*(T*T)/3+a[5]*(T*T*T)/4+a[6]*(T*T*T*T)/5+a[7]/T)}function nasaS(T,a){return 8.31451*(-a[0]/(T*T)/2+-a[1]/T+a[2]*Math.log(T)+a[3]*T+a[4]*(T*T)/2+a[5]*(T*T*T)/3+a[6]*(T*T*T*T)/4+a[8])}function nasaCp(T,a){return 8.31451*(a[0]/(T*T)+a[1]/T+a[2]+a[3]*T+a[4]*T*T+a[5]*T*T*T+a[6]*T*T*T*T)}function nasaFun(prop,xType,x,subs){const MW=speciesNasa[subs].MW;let a,T;if("T"!==xType){if(T=rootFind((i=>nasaFun(xType,"T",i,subs)-x),500),"T"===prop)return T}else T=x;try{a=speciesNasa[subs].getCoefs(T)}catch{return NaN}switch(prop){case"MW":return MW/1e3;case"H0molar":return nasaH(T,a);case"S0molar":return nasaS(T,a);case"Cp0molar":return nasaCp(T,a);case"H0":return nasaH(T,a)/MW*1e3;case"S0":return nasaS(T,a)/MW*1e3;case"Cp0":return nasaCp(T,a)/MW*1e3;case"G0molar":return nasaH(T,a)-T*nasaS(T,a);case"G0":return(nasaH(T,a)-T*nasaS(T,a))/MW*1e3;default:throw"Undefined property"}}function lkConstants(){let lk={b:[.1181193,.265728,.15479,.030323],c:[.0236744,.0186984,0,.042724],d:[155488e-10,623689e-10],beta:.65392,gamma:.060167};return lk}function Pr_sat(Tr){let ans;return ans=5.92714-6.09648/Tr-1.28862*Math.log(Tr)+.169347*Tr*Tr*Tr*Tr*Tr*Tr+0*(15.2518-15.6875/Tr-13.4721*Math.log(Tr)+.43577*Tr*Tr*Tr*Tr*Tr*Tr),Math.exp(ans)}function Z_TrVr(Tr,Vr){const lk=lkConstants();return 1+(lk.b[0]-lk.b[1]/Tr-lk.b[2]/(Tr*Tr)-lk.b[3]/(Tr*Tr*Tr))/Vr+(lk.c[0]-lk.c[1]/Tr+lk.c[2]/(Tr*Tr*Tr))/(Vr*Vr)+(lk.d[0]+lk.d[1]/Tr)/(Vr*Vr*Vr*Vr*Vr)+lk.c[3]/(Tr*Tr*Tr*Vr*Vr)*(lk.beta+lk.gamma/(Vr*Vr))*Math.exp(-lk.gamma/(Vr*Vr))}function deltaH_TrVr(Tr,Vr){const lk=lkConstants(),Z=Z_TrVr(Tr,Vr),E=lk.c[3]/(2*Tr*Tr*Tr*lk.gamma)*(lk.beta+1-(lk.beta+1+lk.gamma/(Vr*Vr))*Math.exp(-lk.gamma/(Vr*Vr)));return-(Tr*(Z-1-(lk.b[1]+2*lk.b[2]/Tr+3*lk.b[3]/(Tr*Tr))/(Tr*Vr)-(lk.c[1]-3*lk.c[2]/(Tr*Tr))/(2*Tr*Vr*Vr)+lk.d[1]/(5*Tr*Vr*Vr*Vr*Vr*Vr)+3*E))}function deltaSt_TrVr(Tr,Vr){const lk=lkConstants(),Z=Z_TrVr(Tr,Vr),E=lk.c[3]/(2*Tr*Tr*Tr*lk.gamma)*(lk.beta+1-(lk.beta+1+lk.gamma/(Vr*Vr))*Math.exp(-lk.gamma/(Vr*Vr)));return-(Math.log(Z)-(lk.b[0]+lk.b[2]/(Tr*Tr)+2*lk.b[3]/(Tr*Tr*Tr))/Vr-(lk.c[0]-2*lk.c[2]/(Tr*Tr*Tr))/(2*Vr*Vr)-lk.d[0]/(5*Vr*Vr*Vr*Vr*Vr)+2*E)}function lkWrapper(prop,xType,x,yType,y){let Tr,Vr,Pr,Q,ans,propFun,fun,types=[xType,yType],values=[x,y];for(let i=0;i<2;i++)switch(types[i]){case"Tr":Tr=values[i];break;case"Pr":Pr=values[i];break;case"Vr":Vr=values[i];break;case"Q":Q=values[i];break;default:throw Error("Invalid parameter on function Z")}switch(prop){case"Z":propFun=Z_TrVr;break;case"dh":propFun=deltaH_TrVr;break;case"dst":propFun=deltaSt_TrVr;break;case"Pr":propFun=(Tr,Vr)=>Z_TrVr(Tr,Vr)*Tr/Vr;break;case"Vr":return Vr;case"Tr":return Tr;default:throw Error("Property not found")}if(void 0!==Tr)if(Vr)ans=propFun(Tr,Vr);else if(void 0!==Pr){fun=x=>Z_TrVr(Tr,x)-Pr*x/Tr;let first_guess,Psat=Pr_sat(Tr);first_guess=Pr<=Psat?Tr/Pr:.1,Vr=rootFind(fun,first_guess),ans=propFun(Tr,Vr)}else void 0!==Q&&(Pr=Pr_sat(Tr),ans=1===Q?lkWrapper(prop,"Tr",Tr,"Pr",Pr):0===Q?lkWrapper(prop,"Tr",Tr,"Pr",Pr+1e-5):lkWrapper(prop,"Tr",Tr,"Pr",Pr)*Q+lkWrapper(prop,"Tr",Tr,"Pr",Pr+1e-5)*(1-Q));else void 0!==Pr?void 0!==Vr?(fun=x=>Z_TrVr(x,Vr)-Pr*Vr/x,Tr=rootFind(fun,1),ans=propFun(Tr,Vr)):void 0!==Q&&(fun=x=>Pr_sat(x)-Pr,Tr=rootFind(fun,1),ans=lkWrapper(prop,"Tr",Tr,"Q",Q)):void 0!==Vr&&void 0!==Q&&(fun=x=>lkWrapper("Z","Tr",x,"Q",Q)-Pr_sat(x)*Vr/x,Tr=rootFind(fun,1),ans=lkWrapper(Tr,Vr));return ans}math.import({PropsSI:function(prop,xType,x,yType,y,subs){return Module.PropsSI(prop,xType,x,yType,y,subs)},Props1SI:function(prop,subs){return Module.Props1SI(prop,subs)},HAPropsSI:function(prop,xType,x,yType,y,zType,z){return Module.HAPropsSI(prop,xType,x,yType,y,zType,z)},NasaSI:function(prop,xType,x,subs){return nasaFun(prop,xType,x,subs)},LeeKesler:function(prop,xType,x,yType,y){return lkWrapper(prop,xType,x,yType,y)}});"use strict";const parser=math.parser();function laineSolver(text,laineOptions){const t1=performance.now();(laineOptions=void 0===laineOptions?{}:laineOptions).userGuess=void 0===laineOptions.userGuess?{}:laineOptions.userGuess,laineOptions.solveFor||parser.clear();let equations=cleanLines(text,laineOptions);checkDuplicates(equations);let simpleEquations=algebraicSubs(equations);if(equations.sort(((a,b)=>a.vars.length-b.vars.length)),equations=solve1D2D(equations,laineOptions),void 0!==laineOptions.solveFor&&void 0!==parser.get(laineOptions.solveFor))return!1;if(equations.length>0&&(equations=solveND(equations,laineOptions)),void 0!==laineOptions.solveFor&&void 0!==parser.get(laineOptions.solveFor))return!1;if(simpleEquations.sort(((a,b)=>a.vars.length-b.vars.length)),laineOptions.simples=!0,simpleEquations=solve1D2D(simpleEquations,laineOptions),void 0!==laineOptions.solveFor&&void 0!==parser.get(laineOptions.solveFor))return!1;if(simpleEquations.length>0&&(simpleEquations=solveND(simpleEquations,laineOptions)),void 0!==laineOptions.solveFor&&void 0!==parser.get(laineOptions.solveFor))return!1;if(laineOptions.returnProblem){for(let equation of equations)equation.updateComputedVars();for(let simpleEquation of simpleEquations)simpleEquation.updateComputedVars();return equations.concat(simpleEquations)}const t2=performance.now();return console.log("evaluation time:",t2-t1,"ms"),!1}class laineError{constructor(name,message,numb,help){this.name=name,this.message=message,this.lineNumber=numb,this.help=help}}function cleanLines(text,options){let lines=text.split("\n"),equations=[];for(let i=0;i<lines.length;i++)if(lines[i]=lines[i].trim(),checkLine(lines[i],i+1)){const aux=lines[i].split(";");for(let subLine of aux)if(subLine=subLine.trim(),checkLine(subLine,i+1)){let sides=subLine.split("=");if(subLine.endsWith("?")){let value;sides[1]=sides[1].trim().slice(0,-1);try{value=math.evaluate(sides[1])}catch(e){throw new laineError("Guess syntax","Guesses should follow this syntax: variable = value ?",`Line ${i+1}`,"Change the guess to a valid input or remove it")}let name=sides[0].trim();options.userGuess[name]=value;continue}if(singleVar(sides[0],sides[1])){if(void 0!==parser.get(sides[0].trim()))try{throw parser.evaluate(subLine),new laineError("Redefined variable",`Variable ${sides[0].trim()} has been redefined`,`Line ${i+1}`,`Remove or correct line ${i+1}`)}catch(e){if("Redefined variable"===e.name)throw e}if(sides[0].endsWith(")")){let name=sides[0].split("(");if(void 0!==parser.get(name[0].trim()))throw new laineError("Redefined variable with a function",`Variable ${name[0].trim()} has been redefined with a function`,`Line ${i+1}`,`Remove or correct line ${i+1}`)}try{if("Unit"===parser.evaluate(subLine).type){const lhs=sides[0].trim();throw parser.remove(lhs),new Error("dummy")}}catch{try{equations.push(new Equation(subLine,i+1))}catch(e){throw new laineError("Parsing error",`laine could not parse the equation in line ${i+1}`,`Line ${i+1}`,e.message)}}}else try{equations.push(new Equation(subLine,i+1))}catch(e){throw new laineError("Parsing error",`laine could not parse the equation in line ${i+1}`,`Line ${i+1}`,e.message)}}}return equations}function checkLine(line,number){if(""===line||line.startsWith("#"))return!1;if(!/=/.test(line))throw new laineError("Not an equation, comment or blank",`Line ${number} is not a valid line in laine`,`Line ${number}`,"Verify if there is something missing or strange in this line");return!0}function checkDuplicates(equations){let uniqueEq=new Set;for(let equation of equations)uniqueEq.add(equation);if(uniqueEq.size!==equations.length){let copies=new Set;for(let i=0;i<equations.length;i++)for(let j=0;j<equations.length;j++)i!==j&&equations[i].text()==equations[j].text()&&(copies.add(equations[i].number),copies.add(equations[j].number));throw new laineError("Duplicated equation","The problem has multiple copies of a same equation",`Line(s) ${[...copies].join(", ")}`,"Remove the copies")}}class Equation{constructor(line,number){let equationText=line.split("#")[0];this.number=number;let sides=equationText.split("=");this.lhs=sides[0].trim(),this.rhs=sides[1].trim(),this.simple=singleVar(this.lhs,this.rhs),this.vars=varsName(`${this.lhs}-(${this.rhs})`)}text(){return`${this.lhs}-(${this.rhs})`}update(name,value){if(void 0!==name&&void 0!==value){name="$"==name[0]?"\\B\\"+name:"\\b"+name;const regex=new RegExp(name+"\\b","g"),newText=`(${value.toString()})`;this.lhs=this.lhs.replace(regex,newText),this.rhs=this.rhs.replace(regex,newText)}this.vars=varsName(`${this.lhs}-(${this.rhs})`)}updateComputedVars(){const scope=parser.getAll(),names=this.vars;let namesLength=names.length;for(let i=0;i<namesLength;i++)void 0!==scope[names[i]]&&(names.splice(i,1),i--,namesLength--)}}function singleVar(lhs,rhs){if(/\d/.test(lhs[0])||/(\*|\/|\+|-|\^)/.test(lhs))return!1;return!new RegExp("[^\\w]"+lhs.trim()+"[^\\w]").test(rhs)}function varsName(line){const node=math.parse(line),scope=parser.getAll(),symbolNodes=node.filter((node=>node.isSymbolNode)),functionNodes=node.filter((node=>"FunctionNode"===node.type));let symbols=[];checkFunction:for(let symbolNode of symbolNodes){if(symbols.includes(symbolNode.name))continue checkFunction;let test=scope[symbolNode.name];if("number"!=typeof test&&"function"!=typeof test){for(let functionNode of functionNodes)if(symbolNode.name===functionNode.name)continue checkFunction;symbols.push(symbolNode.name)}}return symbols}function algebraicSubs(equations){let simpleEquations=[],simpleEquationsNames=new Set;const scope=parser.getAll();for(let i=0;i<equations.length;i++){equations[i].updateComputedVars();let name=equations[i].lhs.trim();equations[i].simple&&void 0===scope[name]&&!simpleEquationsNames.has(name)&&(simpleEquations.push(equations[i]),simpleEquationsNames.add(name),equations.splice(i,1),i--)}if(simpleEquations.length>0){let change=!0,count=0;for(;count<5&&change;){change=!1;for(let i=0;i<simpleEquations.length;i++){let name=simpleEquations[i].vars;for(let k=0;k<name.length;k++)for(let j=0;j<simpleEquations.length;j++)j!==i&&name[k]===simpleEquations[j].lhs&&(simpleEquations[i].update(name[k],simpleEquations[j].rhs),change=!0)}count++}for(let simpleEquation of simpleEquations){let subs=simpleEquation.lhs.trim();for(let equation of equations)for(let name of equation.vars)name===subs&&equation.update(name,simpleEquation.rhs)}}return simpleEquations}function solve1D2D(equations,laineOptions){let name,scope,t1=performance.now();loop1D_2D:for(;equations.length>0;){if(performance.now()-t1>3e3)throw new laineError("Max. evaluation time","laine could not find a solution for 1D/2D problems in less than 3 seconds",`Stopped at line ${equations[0].number}`,"Try to simplify the problem and contact the developer");if(void 0!==laineOptions.solveFor&&void 0!==parser.get(laineOptions.solveFor))return[];if(name=equations[0].vars,0===name.length)throw new laineError("Redefined variable / No variable","Some variable has been redefined / There is no variables",`Line ${equations[0].number}`,`Remove or correct the line ${equations[0].number}`);if(1===name.length){if(laineOptions.simples)try{if(parser.evaluate(`${equations[0].lhs}=${equations[0].rhs}`),void 0!==parser.get(name[0])){equations.shift();continue loop1D_2D}}catch(e){}let problem1D=new Problem([equations[0]]);if(void 0!==parser.get(problem1D.names[0]))throw new laineError("Redefined variable","Some variable has been redefined",`Line ${problem1D.numbers}`,"Remove or correct the line aforementioned");let options=solveOptions(laineOptions);problem1D.solve(options),equations.shift()}else{let loop1D=!1;scope=parser.getAll();for(let i=0;i<equations.length;i++){name=equations[i].vars;for(let j=0;j<name.length;j++)if(void 0!==scope[name[j]]){equations[i].updateComputedVars(),loop1D=!0;break}}if(equations.sort(((a,b)=>a.vars.length-b.vars.length)),!loop1D&&1!==equations[0].vars.length){let varsA,varsB,changed=!1;loop2D:for(let i=0;i<equations.length&&2===equations[i].vars.length;i++)for(let j=i+1;j<equations.length;j++){if(2!==equations[j].vars.length)continue loop2D;if(varsA=equations[i].vars,varsB=equations[j].vars,varsA[0]===varsB[0]&&varsA[1]===varsB[1]||varsA[1]===varsB[0]&&varsA[0]===varsB[1]){let options2D=solveOptions(laineOptions);new Problem([equations[i],equations[j]]).solve(options2D),equations.splice(i,1),equations.splice(j-1,1),changed=!0;break loop2D}}if(!changed)break loop1D_2D;for(let i=0;i<equations.length;i++){let varsEquation=equations[i].vars;(varsEquation.includes(varsA[0])||varsEquation.includes(varsA[1]))&&equations[i].updateComputedVars()}equations.sort(((a,b)=>a.vars.length-b.vars.length))}}}return equations}function solveND(equations,laineOptions){for(;0!==equations.length;){let vars=new Set(equations[0].vars),block=[equations[0]];equations.shift();let count=0;blockSearch:for(;vars.size!==block.length&&0!==equations.length&&count<equations.length;){for(let name of equations[count].vars)if(vars.has(name)){for(let name2 of equations[count].vars)vars.add(name2);block.push(equations[count]),equations.splice(count,1),count=0;continue blockSearch}count++}let options=solveOptions(laineOptions),problem=new Problem(block);if(block.length!==problem.names.length){if(laineOptions.returnProblem)return block;{let help,df=problem.names.length-block.length;throw help=df<0?`Try to remove ${-df} equation(s) with at least one of these variables: ${problem.names.join(", ")}`:`Try to include ${df} equation(s) with at least one of these variables: ${problem.names.join(", ")}`,new laineError("Degrees of freedom",`The problem has ${problem.names.length} variables and ${block.length} equations`,`Line(s) ${problem.numbers}`,help)}}if(problem.solve(options),void 0!==laineOptions.solveFor&&void 0!==parser.get(laineOptions.solveFor))return[];if(0!==equations.length)for(let equation of equations)equation.updateComputedVars()}return[]}class Problem{constructor(equations){this.compiled=[],this.equations=equations,this.names=[],this.numbers=[],this.jacAux=[];for(let i=0;i<equations.length;i++){this.compiled[i]=math.compile(equations[i].text()),this.numbers[i]=equations[i].number,this.jacAux.push([]);for(let symbol of equations[i].vars)if(this.names.includes(symbol)){for(let z=0;z<this.names.length;z++)if(this.names[z]===symbol){this.jacAux[i].push(z);break}}else this.names.push(symbol),this.jacAux[i].push(this.names.length-1);this.jacAux[i].sort()}this.scope=parser.getAll()}solve(options){const tStart=performance.now();let count=0;const dimension=this.equations.length,maxTimes=dimension>1?20:5;for(2==dimension&&(options.pairSearch=!0);performance.now()-tStart<3e3&&count<maxTimes;){count++;try{return solver(this,options)}catch{1===dimension?(count=void 0!==options.savedSolution?0:count,options.savedSolution=void 0,options.excludedList=1===count,options.binary=2===count,options.negative=3===count):(options.excludedList=!options.excludedList,count>3&&(options.pairSearch=!1),options.negative=count>1&&count<4)}}throw new laineError("Difficult problem or there are no real solutions","laine could not find a feasible solution",`Lines ${this.numbers.join(", ")}`,`1. Check if the problem is correct and there are real solutions <br>2. Try to provide a guess for one (or more) of these variables:<br><b>${this.names.join(", ")}</b><br>Input a guess by using a question mark (?):<br><b>variable = value ?</b><br>3. Contact the developer`)}}function solveOptions(laineOptions){return{negative:!1,binary:!1,returnValue:!1,pairSearch:!1,savedSolution:laineOptions.savedSolution,userGuess:laineOptions.userGuess,excludedList:!1}}function getGuessList(options){let guessList=options.excludedList?[0,1e-4,.01,1,100,1e4,1e6]:[0,1e-5,.001,.1,10,150,1e3,1e5];if(options.negative)for(let i=0;i<guessList.length;i++)guessList[i]*=-1;return guessList}class Guess{constructor(array,error){this.value=array,this.error=error}}function find_guess(problem,options){if(options.binary)return binary_search(problem);let error,guessList=getGuessList(options),guesses=[];if(2===problem.names.length&&options.pairSearch){options.pairSearch=!1;for(let name of problem.names){for(let guess of guessList){options.userGuess[name.trim()]=guess;try{let result=find_guess(problem,options);void 0!==result&&0!==result.length&&guesses.push(result[0])}catch{continue}}delete options.userGuess[name.trim()]}if(0===guesses.length)throw laineError("Guess error [internal]","Pair seach could not find a guess",problem.numbers);return options.pairSearch=!0,guesses.sort(((a,b)=>a.error-b.error)),guesses}const names=problem.names,compiled=problem.compiled;let scope=problem.scope;equationLoop:for(let i=0;i<guessList.length;i++){let varsList=[];for(let name of names){let value;value=void 0!==options.userGuess[name]?options.userGuess[name]:guessList[i]*(1+Math.random()),scope[name]=value,varsList.push(value)}error=0;for(let compiledEq of compiled)try{const aux=compiledEq.evaluate(scope);if(Math.abs(aux)===1/0||isNaN(aux))continue equationLoop;error+=Math.abs(aux)}catch{continue equationLoop}guesses.push(new Guess(varsList,error))}if(0===guesses.length)throw new laineError("Guess error [internal]","Random search could not find a guess",problem.numbers);return guesses.sort(((a,b)=>a.error-b.error)),guesses}function binary_search(problem){const name=problem.names[0],compiled=problem.compiled[0];let scope=problem.scope;const points=[1e6,1e4,6e3,273.15,200,100,1,.01,0,-.01,-1,-100,-1e4,-1e6];let sign,limits,mid,ans=[],lower=1/0;for(let i=0;i<points.length;i++){scope[name]=points[i];try{ans[i]=compiled.evaluate(scope)}catch(e){ans[i]=void 0,sign=void 0;continue}if(isNaN(ans[i])||"number"!=typeof ans[i]){sign=void 0;continue}let thisSign=Math.sign(ans[i]);if(void 0!==sign&&sign!==thisSign){limits=[points[i-1],points[i]],ans=[ans[i-1],ans[i]];break}sign=thisSign;let absValue=Math.abs(ans[i]);absValue<lower&&(lower=absValue)}if(void 0===limits)throw new laineError("Guess error [internal]","Binary search could not find a guess",problem.numbers);let count=0,mid_ans=2;for(;Math.abs(mid_ans)>1&&(mid=(limits[0]+limits[1])/2,scope[name]=mid,mid_ans=compiled.evaluate(scope),Math.sign(mid_ans)===Math.sign(ans[0])?(limits[0]=mid,ans[0]=mid_ans):(limits[1]=mid,ans[1]=mid_ans),count++,!(count>50)););return[new Guess([mid],0)]}function solver(problem,options){const names=problem.names,namesLength=names.length;let guesses,guessOptions,guessTry,Xguesses=math.zeros(namesLength,1),answers=math.zeros(namesLength,1);if(void 0===options.savedSolution)guessOptions=find_guess(problem,options);else{let values=[];for(let name of names)values.push(options.savedSolution[name]);guessOptions=[new Guess(values,0)]}let diff,jacInv,dx,Xdiff,factor,count,count2,guessChange,jac=math.zeros(namesLength,namesLength,"sparse"),countOptions=0,tStart=performance.now(),tol=1e-6;guessLoop:for(;countOptions<3&&guessOptions.length>0;){if(performance.now()-tStart>3e3)throw new laineError("Max. Time [internal]","Max. evaluation time on solver",this.numbers);guessTry=guessOptions[0],guesses=math.zeros(namesLength,1);for(let i=0;i<namesLength;i++)guesses.set([i,0],guessTry.value[i]);for(answers=calcFun(problem,guesses,answers),diff=Math.abs(math.sum(answers)),count=0;count<200;){jac=update_jac(problem,guesses,answers,jac),jacInv=math.inv(jac),dx=math.multiply(jacInv,answers),count2=0,factor=1;lineSearch:for(;count2<10;){Xguesses=math.subtract(guesses,math.multiply(dx,factor)),answers=calcFun(problem,Xguesses,answers);for(let i=0;i<namesLength;i++)if(isNaN(answers.get([i,0]))||"number"!=typeof answers.get([i,0])){factor/=2,count2++;continue lineSearch}if(Xdiff=Math.abs(math.sum(answers)),!(Xdiff>diff)){guessChange=Math.abs(1-Xdiff/diff),diff=Xdiff,guesses=Xguesses;break lineSearch}factor/=2,count2++}if(10===count2){guessOptions.shift(),countOptions++;continue guessLoop}if(diff<tol){let test=0;for(let i=0;i<namesLength;i++)0!==guesses.get([i,0])?test+=Math.abs(dx.get([i,0])/guesses.get([i,0])):test+=Math.abs(dx.get([i,0]));if(test<tol)break guessLoop;count++}else{if(guessChange<.001&&diff>tol){guessOptions.shift(),countOptions++;continue guessLoop}count++}if(performance.now()-tStart>3e3)throw new laineError("Max. Time [internal]","Max. evaluation time on solver",this.numbers);if(199===count){guessOptions.shift(),countOptions++;continue guessLoop}}}if(0===guessOptions.length||3===countOptions)throw new laineError("Bad start [internal]","Initial guess was a failure",problem.numbers);if(options.returnValue)return guesses;for(let i=0;i<namesLength;i++)parser.set(names[i],guesses.get([i,0]));return!0}function calcFun(problem,guesses,answers){let scope=problem.scope;const compiled=problem.compiled,names=problem.names;for(let i=0;i<names.length;i++)scope[names[i]]=guesses.get([i,0]);for(let i=0;i<compiled.length;i++)answers.set([i,0],compiled[i].evaluate(scope));return answers}function update_jac(problem,guesses,answers,jac){const compiled=problem.compiled,names=problem.names;let der,jacAux;for(let i=0;i<names.length;i++){jacAux=problem.jacAux[i];for(let j=0;j<jacAux.length;j++)der=derivative(problem.scope,compiled[i],names[jacAux[j]],answers.get([i,0]),guesses.get([jacAux[j],0])),jac.subset(math.index(i,jacAux[j]),der)}return jac}function derivative(scope,compiled,name,f,x){let xNear;xNear=0===x?x+1e-8:1.000001*x,scope[name]=xNear;const dfdx=(compiled.evaluate(scope)-f)/(xNear-x);return scope[name]=x,dfdx}let exportData;function createPlot(dataObject,xName,yName){let canvas=document.createElement("canvas");window.innerWidth<400?(canvas.height=.8*window.innerWidth,canvas.width=.8*window.innerWidth):(canvas.height="400",canvas.width="400");let ctx=canvas.getContext("2d"),legend=dataObject.datasets.length>1;return new Chart(ctx,{type:"line",data:dataObject,options:{responsive:!1,title:{display:!0,text:yName+" vs. "+xName},maintainAspectRatio:!1,legend:{display:legend},scales:{xAxes:[{display:!0,type:"linear",scaleLabel:{display:!0,labelString:xName}}],yAxes:[{display:!0,type:"linear",scaleLabel:{display:!0,labelString:yName}}]}}}).update(),canvas}function checkParametric(text){let equations=laineSolver(text,{returnProblem:!0}),names=new Set;for(let equation of equations)for(let name of equation.vars)names.add(name);if(!equations||0===names.size)throw new laineError("No degree of freedom","Parametric analysis requires a problem with one degree of freedom","All lines","Try to remove an equation which constrains the problem");const degrees=names.size-equations.length;if(degrees>1)throw new laineError(`${degrees} degrees of freedom`,"Parametric analysis requires a problem with just one degree of freedom","All lines",`Try to include ${degrees-1} equation(s)`);return names}function plotParametric(text,options){const t1=performance.now();let xName=options.x,yName=options.y,from=parser.evaluate(options.from),to=parser.evaluate(options.to);const Npoints=options.points,delta=(to-from)/(Npoints-1);let data=[];exportData=`${xName}\t${yName}\n`;let storeSolution={},equations=laineSolver(text,{returnProblem:!0}),equationsText="",names=new Set;for(let equation of equations){equationsText+=`${equation.lhs}=${equation.rhs}\n`;for(let name of equation.vars)names.add(name)}let errors=[];for(let i=0;i<Npoints;i++){let stateVar=`${xName} = ${from+delta*i}\n`;try{0===i?laineSolver(stateVar+text):laineSolver(stateVar+equationsText,{savedSolution:storeSolution,solveFor:yName})}catch(e){errors.push(from+delta*i);continue}let point={x:parser.scope[xName],y:parser.scope[yName].toPrecision(5)};data.push(point),exportData+=`${point.x}\t${point.y}\n`,storeSolution=parser.getAll();for(let name of names)parser.remove(name)}if(errors.length>0){throw new laineError("Incomplete parametric analysis","laine failed to find solution(s) at some point(s)",`x = ${errors.join(",\nx = ")}`,"Verify if the problem is correct and change the x range")}let canvas=createPlot({datasets:[{fill:!1,backgroundColor:"rgba(0, 0, 0, 1)",borderColor:"rgba(0, 0, 0, 1)",data:data}]},xName,yName);const t2=performance.now();return console.log("Plot time:",t2-t1,"ms"),canvas}class State{constructor(text){const pieces=text.split(",");this.first=[pieces[1].slice(1,-1),parser.evaluate(pieces[2])],this.second=[pieces[3].slice(1,-1),parser.evaluate(pieces[4])],this.fluid=pieces[5].slice(1,-1),this.memory={},this.T=Module.PropsSI("T",this.first[0],this.first[1],this.second[0],this.second[1],this.fluid),this.P=Module.PropsSI("P",this.first[0],this.first[1],this.second[0],this.second[1],this.fluid),this.H=Module.PropsSI("H",this.first[0],this.first[1],this.second[0],this.second[1],this.fluid),this.S=Module.PropsSI("S",this.first[0],this.first[1],this.second[0],this.second[1],this.fluid),this.Q=Module.PropsSI("Q",this.first[0],this.first[1],this.second[0],this.second[1],this.fluid),this.D=Module.PropsSI("D",this.first[0],this.first[1],this.second[0],this.second[1],this.fluid)}}function getStates(text){let states=[];const found=text.replace(/#.*/g,"").match(/PropsSI\(.*(?=\))/g);if(!found){throw new laineError("No states found","laine could not find any calls to PropsSI function","All lines","Include a state by calling the PropsSI function for any property")}for(let i=0;i<found.length;i++)states.push(new State(found[i]));return states}function plotStates(stateList,type){const t1=performance.now();let xName,yName,xAxis,yAxis;"Ts"===type.value?(xName="S",xAxis="s [J/(kg.K)]",yName="T",yAxis="T [K]"):"Ph"===type.value?(xName="H",xAxis="h [J/kg]",yName="P",yAxis="P [Pa]"):"Pv"===type.value?(xName="D",xAxis="v [m³/kg]",yName="P",yAxis="P [Pa]"):(xName="D",xAxis="v [m³/kg]",yName="T",yAxis="T [K]"),exportData=`States\n${xAxis}\t${yAxis}\n`;let xValue,yValue,data=[],fluid=stateList[0].fluid,yMin=1/0,yMax=0;for(let state of stateList){xValue=state[xName],yValue=state[yName],yValue<yMin&&(yMin=yValue),yValue>yMax&&(yMax=yValue),xValue="D"===xName?1/xValue:xValue;let point={x:xValue,y:yValue};data.push(point),exportData+=`${xValue}\t${yValue}\n`}let liqData=[],vapData=[];let delta=(yMax-yMin)/20;0===delta&&(delta=(1.1*yMin-.9*yMin)/20,yMin*=.9);let ySat,xSat,exportVap=`\nSat. vap.\n${xAxis}\t${yAxis}\n`;exportData+=`\nSat. liq.\n${xAxis}\t${yAxis}\n`;for(let i=0;i<21;i++){if(ySat=yMin+delta*i,xSat=Module.PropsSI(xName,yName,ySat,"Q",0,fluid),xSat!==1/0){xSat="D"===xName?1/xSat:xSat;let pointLiq={x:xSat,y:ySat};liqData.push(pointLiq),exportData+=`${pointLiq.x}\t${pointLiq.y}\n`}if(xSat=Module.PropsSI(xName,yName,ySat,"Q",1,fluid),xSat!==1/0){xSat="D"===xName?1/xSat:xSat;let pointVap={x:xSat,y:ySat};vapData.push(pointVap),exportVap+=`${pointVap.x}\t${pointVap.y}\n`}}exportData+=exportVap;let dataPoints={datasets:[{label:"States",lineTension:0,fill:!1,backgroundColor:"rgba(0, 0, 0, 1)",borderColor:"rgba(0, 0, 0, 1)",data:data,showLine:!1,pointRadius:5},{label:"Sat. liq.",backgroundColor:"rgba(0, 0, 255, 1)",borderColor:"rgba(0, 0, 255, 1)",data:liqData,pointRadius:0,fill:!1},{label:"Sat. vap.",backgroundColor:"rgba(255, 0, 0, 1)",borderColor:"rgba(255, 0, 0, 1)",data:vapData,pointRadius:0,fill:!1}]},isoLines=["P","S","T","H","D"],isoData=[];exportData+=`\nProcess\n${xAxis}\t${yAxis}\n`;for(let i=0;i<stateList.length-1;i++)for(let j=0;j<isoLines.length;j++){let prop=isoLines[j];if(stateList[i][prop]===stateList[i+1][prop]){if(isoData.push(data[i]),exportData+=`${data[i].x}\t${data[i].y}\n`,prop===yName||prop===xName)break;if("T"===prop||"P"===prop){let thisState=stateList[i],nextState=stateList[i+1];if(-1!==thisState.Q&&-1===nextState.Q){let Qpoint,nextPhase=nextState.Phase;2===nextPhase||5===nextPhase?Qpoint=1:0!==nextPhase&&3!==nextPhase||(Qpoint=0);let T=thisState.T,xValue=Module.PropsSI(xName,"T",T,"Q",Qpoint,fluid),yValue=Module.PropsSI(yName,"T",T,"Q",Qpoint,fluid);yValue="D"===yName?1/yValue:yValue,xValue="D"===xName?1/xValue:xValue;let point={x:xValue,y:yValue};isoData.push(point),exportData+=`${point.x}\t${point.y}\n`}}if("Ph"===type.value){let yBegin="D"===yName?1/data[i].y:data[i].y,yEnd="D"===yName?1/data[i+1].y:data[i+1].y;addIso(isoData,"y",prop,stateList[i][prop],yEnd,yBegin,yName,xName,fluid);break}{let xBegin="D"===xName?1/data[i].x:data[i].x,xEnd="D"===xName?1/data[i+1].x:data[i+1].x;addIso(isoData,"x",prop,stateList[i][prop],xEnd,xBegin,xName,yName,fluid);break}}j===isoLines.length-1&&(isoData.push(data[i]),exportData+=`${data[i].x}\t${data[i].y}\n`)}isoData.push(data[stateList.length-1]),exportData+=`${data[stateList.length-1].x}\t${data[stateList.length-1].y}\n`;let isoDataPlot={label:"Process",lineTension:0,borderDash:[5],fill:!1,backgroundColor:"rgba(0, 0, 0, 1)",borderColor:"rgba(0, 0, 0, 1)",data:isoData,pointRadius:0};dataPoints.datasets.push(isoDataPlot);let canvas=createPlot(dataPoints,xAxis,yAxis);return console.log("Plot time:",performance.now()-t1,"ms"),canvas}function addIso(data,coord,propName,propValue,max,min,name,otherName,fluid){const delta=(max-min)/40;let xValue,yValue,xName,yName;for(let i=0;i<41;i++)if("x"===coord?(xValue=parseFloat(min)+delta*i,xName=name,yName=otherName,yValue=Module.PropsSI(otherName,xName,xValue,propName,propValue,fluid)):(yValue=parseFloat(min)+delta*i,yName=name,xName=otherName,xValue=Module.PropsSI(otherName,name,yValue,propName,propValue,fluid)),yValue="D"===yName?1/yValue:yValue,xValue="D"===xName?1/xValue:xValue,xValue!==1/0&&yValue!==1/0){let point={x:xValue,y:yValue};data.push(point),exportData+=`${point.x}\t${point.y}\n`}return data}const editorDiv=document.querySelector(".CodeMirror"),solBox=document.getElementById("solBox"),errorGrid=document.querySelector(".errorGrid"),errorBox=document.getElementById("errorBox"),plotPropBox=document.getElementById("contentParametric"),parametricBox=document.getElementById("contentPropPlot"),mathDiv=document.querySelector(".mathDiv"),outDiv=document.querySelector(".out");function laine(isfast){clearAll();const lines=editor.getValue();isfast||writeEqs(lines);try{laineSolver(lines)}catch(e){return displayError(e),!1}return displayResults(isfast),editor.refresh(),!0}function writeEqs(inputText){const lines=inputText.split("\n");mathDiv.innerHTML="";let converter=new showdown.Converter;for(let i=0;i<lines.length;i++)if(checkLine(lines[i].trim(),i)){const aux=lines[i].split(";");for(let subline of aux){const sep=subline.split("#");let comment="\\;\\text{";for(let j=1;j<sep.length;j++)comment+=sep[j];let para=document.createElement("p");try{para.textContent="$$"+formatMathJax(sep[0])+comment+"}$$"}catch{para.textContent="$$"+sep[0]+comment+"}$$"}mathDiv.appendChild(para)}}else{let flag=!1;const dels=[new RegExp("\\$\\$"),new RegExp("\\\\\\("),new RegExp("\\\\\\[")];for(let del of dels)if(lines[i].match(del)){flag=!0;break}mathDiv.innerHTML+=flag?`<p>${lines[i].slice(1)}</p>`:converter.makeHtml(lines[i].slice(1))}}function formatMathJax(line){const sides=line.split("="),symbols=/(\*|\+|-|\/|\(|\^|=|,|\))/;if((line=sides[0]+"=="+sides[1]).includes("_")){const pieces=line.split("_");line=pieces[0];for(let i=1;i<pieces.length;i++){const piece=pieces[i];line+="[";const pieceLength=piece.length;for(let j=0;j<pieceLength;j++){if(symbols.test(piece[j])){line+=piece.slice(0,j)+"]"+piece.slice(j,pieceLength);break}j===pieceLength-1&&("}"===piece.slice(pieceLength-1,pieceLength)?line+=piece.slice(0,pieceLength-1)+"]"+piece.slice(pieceLength-1,pieceLength):line+=piece+"]")}}line.includes("][")&&(line=line.replace(/\]\[/g,","))}const greek=["$alpha","$beta","$gamma","$delta","$epsilon","$zeta","$eta","$theta","$iota","$kappa","$lambda","$mu","$nu","$xi","$omicron","$pi","$rho","$sigma","$tau","$upsilon","$phi","$chi","$psi","$omega","$Alpha","$Beta","$Gamma","$Delta","$Epsilon","$Zeta","$Eta","$Theta","$Iota","$Kappa","$Lambda","$Mu","$Nu","$Xi","$Omicron","$Pi","$Rho","$Sigma","$Tau","$Upsilon","$Phi","$Chi","$Psi","$Omega"];for(let letter of greek)if(line.includes(letter)){const pieces=line.split(letter);line=pieces[0];for(let j=1;j<pieces.length;j++)line+=`${letter.slice(1)} ${pieces[j]}`}return math.parse(line).toTex({parenthesis:"auto"})}function displayResults(fast){outDiv.innerText="";const solutions=Object.entries(parser.getAll());for(let solution of solutions)writeAns(solution,fast);fast?(mathDiv.style.display="none",editorDiv.style.display="block"):(mathDiv.style.display="block",editorDiv.style.display="none",MathJax.typeset()),solBox.style.display="grid"}function writeAns(solution,fast){let msg,text,key=solution[0],value=solution[1];if("number"==typeof value)value=value.toPrecision(5),text=value.toString();else{if("function"==typeof value)return null;if("object"==typeof value){value=Object.entries(value),text="{";const valueLength=value.length;for(let i=0;i<valueLength;i++)"number"==typeof value[i][1]&&(value[i][1]=value[i][1].toPrecision(5)),text+=value[i][0]+" : "+value[i][1],i<valueLength-1&&(text+=" ,");text+="}"}}if(fast){let para=outDiv.insertRow(-1);para.insertCell(0).textContent=key,para.insertCell(1).textContent=text}else{msg=key+" = "+text;let para=document.createElement("p");para.textContent="$$"+formatMathJax(msg)+"$$",outDiv.appendChild(para)}}function displayError(e){errorGrid.innerText="";const texts=["<b>Type</b>",e.name,"<b>Where?</b>",e.lineNumber,"<b>What?</b>",e.message,"<b>Help</b>",e.help];for(let text of texts){let elem=document.createElement("span");elem.innerHTML=text,errorGrid.appendChild(elem)}errorBox.style.display="block",editor.refresh()}function clearDropdown(exceptionID){const genericDropbox=document.querySelectorAll(".dropdownContent");for(let generic of genericDropbox)exceptionID!==generic.id&&(generic.style.display="none")}function clearHiddenMenus(exceptionID){const genericMenus=document.querySelectorAll(".hiddenMenu");for(let generic of genericMenus)exceptionID!==generic.id&&(generic.style.display="none")}function clearReportView(){"block"===mathDiv.style.display&&(mathDiv.style.display="none",solBox.style.display="none",editorDiv.style.display="block",reportButton.innerText=window.innerWidth<600?"Report":"Report (F4)"),editor.refresh()}function clearAll(exceptionID){clearDropdown(exceptionID),clearHiddenMenus(exceptionID),clearReportView()}function dropdownHover(button){const content=button.nextElementSibling;button.onmouseover=function(){window.innerWidth>=600&&(content.style.display="grid")};button.parentNode.onmouseleave=function(){content.style.display="none",document.activeElement.blur()}}function dropdownClick(button){const content=button.nextElementSibling,display=content.style.display;clearDropdown(),"grid"!==display?content.style.display="grid":(content.style.display="none",document.activeElement.blur())}editor.on("click",(function(){clearDropdown()})),editor.on("focus",(function(){clearDropdown()})),editor.on("change",(function(){textBox.value=editor.getValue(),solBox.style.display="none",plotPropBox.style.display="none",parametricBox.style.display="none"})),document.querySelector(".interface").onclick=function(){clearDropdown()};const dropButtons=document.querySelectorAll(".dropdownButton");for(let button of dropButtons)dropdownHover(button),button.onclick=()=>dropdownClick(button);function hiddenMenu(openId,contentId,closeId){const open=document.getElementById(openId),content=document.getElementById(contentId),close=document.getElementById(closeId);open.onclick=function(){clearDropdown(),content.style.display="block",editor.refresh()},close.onclick=function(){content.style.display="none",editor.refresh()}}hiddenMenu("openPropsSI","contentPropsSI","closePropsSI"),hiddenMenu("openHAPropsSI","contentHAPropsSI","closeHAPropsSI"),hiddenMenu("openNasa","contentNasa","closeNasa"),hiddenMenu("openLk","contentLk","closeLk"),hiddenMenu("openParametric","contentParametric","closeParametric");const plotMenuButton=document.getElementById("openParametric");plotMenuButton.onclick=function(){let names;clearDropdown();try{names=checkParametric(editor.getValue())}catch(e){return displayError(e),!1}let xSelect=document.querySelector(".plotX"),ySelect=document.querySelector(".plotY");xSelect.options.length=0,ySelect.options.length=0;for(const name of names){let optX=document.createElement("option"),optY=document.createElement("option");optX.value=name,optX.text=name,optY.value=name,optY.text=name,xSelect.add(optX),ySelect.add(optY)}document.getElementById("contentParametric").style.display="block"},hiddenMenu("openPropPlot","contentPropPlot","closePropPlot");const propPlotMenuButton=document.getElementById("openPropPlot");let stateOptions;propPlotMenuButton.onclick=function(){clearDropdown(),stateTable.innerHTML="",tableSize=1,checkStates(editor.getValue())&&(document.getElementById("contentPropPlot").style.display="block")};const stateTable=document.querySelector(".stateTable");let tableSize=1;function checkStates(text){try{laineSolver(text)}catch(e){return displayError(e),!1}let optionText,states=getStates(text),fluids=[],options=[],optionsEntry=[],fluidsSelect=document.querySelector(".propPlotFluid");fluidsSelect.options.length=0;for(let i=0;i<states.length;i++){if(!fluids.includes(states[i].fluid)){fluids.push(states[i].fluid);let fluidOpt=document.createElement("option");fluidOpt.value=states[i].fluid,fluidOpt.text=states[i].fluid,fluidsSelect.add(fluidOpt)}optionText=-1===states[i].Q?"T: "+states[i].T.toPrecision(5)+" [K] ; P: "+states[i].P.toPrecision(5)+" [Pa]":"T: "+states[i].T.toPrecision(5)+" [K] ; P: "+states[i].P.toPrecision(5)+" [Pa] ; Q:"+states[i].Q.toPrecision(5),optionsEntry.includes(optionText)||(optionsEntry.push(optionText),options.push([optionText,states[i]]))}return stateOptions=options,!0}function addState(){let stateRow=document.createElement("div"),stateNumber=document.createElement("span"),stateSelect=document.createElement("select"),stateButton=document.createElement("button");stateNumber.textContent="("+tableSize+")",tableSize+=1,stateRow.appendChild(stateNumber),stateSelect.options.length=0;for(let i=0;i<stateOptions.length;i++){let option=document.createElement("option");option.value=i,option.text=stateOptions[i][0],stateSelect.add(option)}stateRow.appendChild(stateSelect),stateButton.textContent="Delete",stateButton.style.padding="5px",stateRow.appendChild(stateButton),stateTable.appendChild(stateRow),stateButton.onclick=function(){stateTable.removeChild(stateRow),tableSize-=1;for(let i=0;i<stateTable.children.length;i++){let number=i+1;stateTable.children[i].children[0].innerHTML="("+number+")"}},editor.refresh()}const addStateButton=document.querySelector(".plotAddState");function hideGrandParentDiv(button){const grandparent=button.parentNode.parentNode;button.onclick=function(){grandparent.style.display="none",editor.refresh()}}addStateButton.onclick=addState;const closeButtons=document.querySelectorAll(".hiddenMenuClose");for(let button of closeButtons)hideGrandParentDiv(button);const plotButton=document.querySelector(".plotDraw");plotButton.onclick=function(){clearDropdown(),clearHiddenMenus("contentParametric");let div=document.getElementById("canvasDiv");div.innerText="";let canvas,options={x:document.querySelector(".plotX").value,y:document.querySelector(".plotY").value,from:document.querySelector(".plotXfrom").value,to:document.querySelector(".plotXto").value,points:document.querySelector(".plotNpoints").value},text=editor.getValue();try{canvas=plotParametric(text,options)}catch(e){displayError(e),document.getElementById("plotDrawBox").style.display="none"}div.appendChild(canvas),document.getElementById("plotDrawBox").style.display="block",editor.refresh()};const propPlotButton=document.querySelector(".propPlotDraw");propPlotButton.onclick=function(){clearDropdown(),clearHiddenMenus("contentPropPlot");let canvas,div=document.getElementById("canvasDiv");div.innerText="";let stateList=[],list=stateTable.children;for(let i=0;i<list.length;i++){const stateID=list[i].children[1].value,state=stateOptions[stateID][1];stateList.push(state)}let type=document.querySelector(".propPlotType");try{canvas=plotStates(stateList,type)}catch(e){displayError(e)}div.appendChild(canvas),document.getElementById("plotDrawBox").style.display="block",document.getElementById("solBox").style.display="none",editor.refresh()};const solveButton=document.querySelector(".solve");solveButton.onclick=function(){clearAll(),laine(!0),"Edit (F4)"===reportButton.innerText&&reportButton.click()};const reportButton=document.querySelector(".report");function shortcut(key){"F2"===key.code?solveButton.click():"F4"===key.code&&reportButton.click()}function changeTextButtons(){window.innerWidth<600&&"Solve (F2)"===solveButton.innerText?(solveButton.innerText="Solve",reportButton.innerText="Report (F4)"==reportButton.innerText?"Report":"Edit"):window.innerWidth>=600&&"Solve"===solveButton.innerText&&(solveButton.innerText="Solve (F2)",reportButton.innerText="Report"==reportButton.innerText?"Report (F4)":"Edit (F4)")}function writePropsSI(){const fluid=document.querySelector(".FluidName").value,property=document.querySelector(".Property").value,input1=document.querySelector(".Input1").value,input2=document.querySelector(".Input2").value,value1=document.querySelector(".value1").value,value2=document.querySelector(".value2").value,trivials=["acentric","M","PCRIT","TCRIT","RHOCRIT","RHOMOLAR_CRITICAL"];let flag,text;for(let trivial of trivials)if(property==trivial){flag=!0;break}text=flag?`property=Props1SI('${property}','${fluid}')`:`property=PropsSI('${property}','${input1}',${value1},'${input2}',${value2},'${fluid}')`,textBox.value+="\n"+text,editor.getDoc().setValue(textBox.value),clearDropdown()}reportButton.onclick=function(){"none"===mathDiv.style.display?(clearDropdown(),clearHiddenMenus(),laine(!1)&&(reportButton.innerText=window.innerWidth<600?"Edit":"Edit (F4)")):clearAll()},document.onkeydown=shortcut,window.onresize=changeTextButtons;const PropsSIButton=document.querySelector(".butPropsSI");function writeHAPropsSI(){const property=document.querySelector(".HAProperty").value,input1=document.querySelector(".HAInput1").value,input2=document.querySelector(".HAInput2").value,input3=document.querySelector(".HAInput3").value,text=`property=HAPropsSI('${property}','${input1}',${document.querySelector(".HAvalue1").value},'${input2}',${document.querySelector(".HAvalue2").value},'${input3}',${document.querySelector(".HAvalue3").value})`;textBox.value+="\n"+text,editor.getDoc().setValue(textBox.value)}PropsSIButton.onclick=writePropsSI;const HAPropsSIButton=document.querySelector(".butHAPropsSI");function writeNasa(){const property=document.querySelector(".nasaProp").value,specie=document.querySelector(".nasaSpecie").value,text=`property=NasaSI('${property}','${document.querySelector(".nasaInputType").value}',${document.querySelector(".nasaInput").value},'${specie}')`;textBox.value+="\n"+text,editor.getDoc().setValue(textBox.value)}HAPropsSIButton.onclick=writeHAPropsSI;const NasaButton=document.querySelector(".butNasa");function writelk(){const property=document.querySelector(".lkProp").value,input1=document.querySelector(".lkInput1").value,inputType1=document.querySelector(".lkInputType1").value,input2=document.querySelector(".lkInput2").value;let text=`property=LeeKesler('${property}','${inputType1}',${input1},'${document.querySelector(".lkInputType2").value}',${input2})`;textBox.value+="\n"+text,editor.getDoc().setValue(textBox.value)}NasaButton.onclick=writeNasa;const leeKeslerButton=document.querySelector(".butlk");function newFile(){confirm("Are you sure?")&&(textBox.value="",editor.getDoc().setValue(textBox.value)),clearAll()}leeKeslerButton.onclick=writelk;const newButton=document.querySelector(".new");function saveFile(){let textToSave=document.getElementById("box").value,textToSaveAsBlob=new Blob([textToSave],{type:"text/plain"}),textToSaveAsURL=window.URL.createObjectURL(textToSaveAsBlob),downloadLink=document.createElement("a");downloadLink.download="laineSave.txt",downloadLink.innerHTML="Download File",downloadLink.href=textToSaveAsURL,downloadLink.onclick=destroyClickedElement,downloadLink.style.display="",document.body.appendChild(downloadLink),downloadLink.click(),clearDropdown()}function destroyClickedElement(event){document.body.removeChild(event.target)}function exportDataFile(){let textToSaveAsBlob=new Blob([exportData],{type:"text/plain"}),textToSaveAsURL=window.URL.createObjectURL(textToSaveAsBlob),downloadLink=document.createElement("a");downloadLink.download="laineData.txt",downloadLink.innerHTML="Download File",downloadLink.href=textToSaveAsURL,downloadLink.onclick=destroyClickedElement,downloadLink.style.display="",document.body.appendChild(downloadLink),downloadLink.click()}function loadFileAsText(){clearAll(),fileInput.click(),"Edit (F4)"===reportButton.innerText&&reportButton.click()}newButton.onclick=newFile;let fileInput=document.getElementById("fileToLoad");function changeText(){let fileToLoad=fileInput.files[0],fileReader=new FileReader;fileReader.onload=function(fileLoadedEvent){let textFromFileLoaded=fileLoadedEvent.target.result;editor.getDoc().setValue(textFromFileLoaded)},fileReader.readAsText(fileToLoad,"UTF-8")}fileInput.addEventListener("change",(function(){changeText(),fileInput.value=""}),!1),window.onbeforeunload=function(e){return(e=e||window.event)&&(e.returnValue="Sure?"),"Sure?"};